// Mixins (миксины, примеси)

// Миксин является шаблоном, способом реализации класса для расширения базовых классов.
// TypeScript не позволяет использовать напрямую множественное наследование.
// Можно реализовать множество интерфейсов в классе, но унаследовать класс можно только от одного класса.
// Однако функциональность миксинов частично позволяет унаследовать свойства и методы сразу двух и более классов.
// Для наследования функционала классов в определении класса-миксина применяется ключевое слово implements, после которого идёт перечисление наследуемых классов.

// Ограничения класса-миксина:
// * Миксин может унаследовать только те свойства и методы, которые непосредственно определены в применяемом классе.
//   Поэтому данный способ не будет работать, если применяемый класс, в свою очередь, также наследует какие-то свойства и методы от другого класса.
// * Если родительские классы определяют метод с одним и тем же именем, то миксин наследует только тот метод, который копируется в него последним в функции applyMixins (пример ниже).

// класс "Животное"

class Animal {
    feed(): void {
        console.log("Feed the animal");
    }
}

// класс "Транспорт"

class Transp {
    speed: number = 0;
    move(): void {
        if (this.speed == 0) {
            console.log("Transport stopped");
        }
        else if (this.speed > 0) {
            console.log(`Transport moves at a speed of ${this.speed} km/h`);
        }
    }
}

// класс "Лошадь" - класс-миксин, наследует функционал классов Animal и Transp
// здесь вместо полного описания методов используется только определение функций (feed и move),
// а cама реализация функций будет браться из родительских классов

class Horse implements Animal, Transp {
    speed: number = 0;
    feed: () => void;
    move: () => void;
}

// чтобы класс-миксин Horse мог унаследовать функционал надо использовать специальную функцию (applyMixins),
// которая скопирует функционал из массива родительских классов (массив применяемых классов) в класс-миксин

function applyMixins(derivedCtor: any, baseCtors: any[]) {
    baseCtors.forEach(baseCtor => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}

// применяем функцию копирования функционала
applyMixins(Horse, [Animal, Transp]);

// создание объекта класса-миксина и вызов унаследованных методов
let pony: Horse = new Horse();
pony.feed();
pony.move();
pony.speed = 5;
pony.move();
